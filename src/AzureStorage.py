import os
import logging
from azure.storage.blob import BlobServiceClient


class AdlsUpload:
    """Class for uploading files to Azure Blob Storage.

    Attributes:
        spark (object): The Spark session object.

    Methods:
        upload_files_to_blob_storage: Uploads CSV, JSON, and TXT files to Azure Blob Storage.
    """

    def __init__(self, spark_session):
        """Initialize the AdlsUpload class.

        Args:
            spark_session (object): The Spark session object.
        """
        self.spark = spark_session

    def upload_files_to_blob_storage(self,conf):
        """Upload CSV, JSON, and TXT files to Azure Blob Storage."""
        def upload_to_blob_storage(file_path, file_name):
            """Upload a file to Azure Blob Storage.

            Args:
                file_path (str): The local path of the file.
                file_name (str): The name of the file.

            Raises:
                Exception: If an error occurs during the upload process.
            """
            try:
                blob_service_client = BlobServiceClient.from_connection_string(conf['azure_storage']['connection_string'])
                container_name = conf['azure_storage']['container_name']
                adls_folder_path = conf['folders']['adls_folder_path']

                blob_client = blob_service_client.get_blob_client(container=container_name, blob=os.path.join(adls_folder_path, file_name))

                # Check if the blob already exists
                if blob_client.exists():
                    print(f"File {file_name} already exists in Azure Blob Storage")
                else:
                    with open(file_path, "rb") as data:
                        blob_client.upload_blob(data)
                    print(f"Uploaded file {file_name}")
            except Exception as e:
                logging(f"Error uploading file {file_name}: {str(e)}")

        output_directory = conf['Paths']['uuid_output_path']

        # ADLS Upload for each CSV, JSON, and TXT file generated by Spark
        allowed_extensions = [".csv", ".json", ".txt"]

        for file_name in os.listdir(output_directory):
            if any(file_name.endswith(ext) for ext in allowed_extensions):
                file_path = os.path.join(output_directory, file_name)
                upload_to_blob_storage(file_path, file_name)
